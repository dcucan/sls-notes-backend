service: sls-notes-backend

plugins:
  - serverless-offline
  - serverless-domain-manager

custom: 
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Lenght
    - Authorization
    - X-Amz-Date
    - X-Api_Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - app_user_id
    - app_user_name
  customDomain:
    domainName: api.zuzanadrozdova.com
    basePath: 'awswebapp'
    stage: ${self:provider.stage}
    certificateName: zuzanadrozdova.com
    createRoute53Record: true


provider:
  name: aws
  runtime: nodejs10.x
  region: eu-west-1
  stage: prod 
  memorySize: 128
  timeout: 5
  endpointType: regional
  environment: 
    NOTES_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    COGNITO_IDENTITY_POOL_ID: eu-west-1:53097d1e-ebfa-4c0c-9337-eca9c55011f3
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}"


functions:
  authenticate-google:
    handler: api/authenticate-google.handler
    description: Google IDP Authentication
    events:
      - http:
          path: auth 
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  add-note:
    handler: api/add-note.handler
    description: POST /note
    events:
      - http:
          path: note
          method: post 
 #         authorizer: aws_iam
          cors: 
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  update-note:
    handler: api/update-note.handler
    description: PATCH /note
    events:
      - http:
          path: note
          method: patch 
  #        authorizer: aws_iam
          cors: 
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  get-notes:
    handler: api/get-notes.handler
    description: GET /notes
    events:
      - http:
          path: notes
          method: get 
   #       authorizer: aws_iam
          cors: 
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  get-note:
    handler: api/get-note.handler
    description: GET /note/n/{note_id}
    events:
      - http:
          path: note/n/{note_id}
          method: get 
    #      authorizer: aws_iam
          cors: 
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  delete-note:
    handler: api/delete-note.handler
    description: Delete /note
    events:
      - http:
          path: note/t/{timestamp}
          method: delete 
  #        authorizer: aws_iam
          cors: 
            origin: '*'
            headers: ${self:custom.allowedHeaders}


resources:
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table 
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.NOTES_TABLE}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N 
          - AttributeName: note_id
            AttributeType: S 
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: note_id-index
            KeySchema:
              - AttributeName: note_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
            
#  GatewayResponseDefault4XX:
#    Type: AWS::ApiGateway::GatewayResponse 
#    Properties:
#      ResponseParameters:
#        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
#        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
#      ResponseType: DEFAULT_4XX
#      RestApiId:
#        Ref: 'ApiGatewayRestApi'


